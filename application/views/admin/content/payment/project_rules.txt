1) Все что нужно в 2 методах контролера или в нескольких контролерах - выносим в base_controller. Там же и сделана парсинг по методу запроса (REST).

2) Для того чтоб что-то передать во вьюху в любом месте можно просто вызвать view()->data - все что суда запхать будет доступно глобально во всех вьюхах

3) для рендеринга части вьюхи есть helper make().

4) для стандартизации используем константы в Content.php библиотеке. чтоб в хелпере маке можно было просто вставить имя а папка определяется на основе того какой контролер поднялся. Появляется строгая архитектура папок для вьюх

5) залогиненый или нет пользователь можно узать view()->data->user_is_login

6)view          // тут лежат все вьюхи
  -blocks       // тут все блоки:
  --sidebars    // sidebars это все подключается в лайоуте
  ---baner.php
     ...
  --submenus    // submenus устанавливается в конструкторе контролера так view()->submenu = 'NAME_OF_FILE_ON_THIS_FOLDER' for ex. ..= 'profile';
  ---profile.php
     ...

  -content      // тут все основные вьюхи СТРОГО в папке контент лежит только папки в согласии с названием контролера
  --home        // название контролера к которому тут лежат вьюхи
  ---index.php  // вьха к акшену index
     ...
  ...

  -footer       // тут лежат файлы футеров. надеюсь он всегда будет 1 :)
  --main.php

  -header       // тут лежат все варианты хеадеров верхний и нижний и верхний не залогиненый. надеюсь это и все что тут нужно :)
  --top.php
  --bottom.php
    ...
  -layout       // тут лайоут тоже надюсь никому в голову не прийдет еще один создать без очень очень крайней необходимости
  --main.php

7) перемая которая устанавливает подменю имеет default value = name of class - т.е. название контролера и предпологается что контролеры организованы так что все что нужно для одного меню храниться в одном контролере отдельном от других

8) когда строятся меню 2 уровень чтоб отметить активный пункт меню есть хелпер setActive() - как использовать посмотреть нужно в готовых меню

9) для создания нового sudebara нужно поместить его вьюху в папку blocks/sidebars и в config_sys добавить название в переменую $config['sidebars']

10) чтоб сделать ссылку активной для ajax нужно её пометить 2 дата тегами data-type="link" data-menu="page/page/partnership" 1 - указывает что эту ссылку нужно грузить через ajax а 2 - указывает какое меню должно быть при этом (2 ряд меню) и какой пункт меню должен быть активным (выделеным)

11) для каждой формы нужно прописать обработчик если нужен какой-то свой и его указать в дата теге. Дата теги для кнопки отправить форму чтоб она отправилась ajax data-type="form_submit" data-menu="profile/profile" data-callback="myFunction". 1 и 2 аналогично предыдущему.
    Создаются файлы для каждого колбека повторяя структура папок в папке view/content. т.е. для каждого контроллера и actiona свой фаил с его колбеком четко для той вьюхи.
    Важно в том вайле селать функцию теста чтоб можно было определить загружена она или нет. Это должна быть функция с названием контролера и акшена и возвращать true

12) в папке js повторяем структуру папок во вьюхах. в js есть класс Loader с его помощью можно подгружать необходимые скрипты только один раз чтоб не переопределять то что не нужно.
    метод Loader.includeOnce(file_name, path_...), path - есть константы в файле loader.js используйте их плз. при необходимости добавляйте их туда

23) в файлах пункта 12 размещаем класс js под именем контроллер_метод в котором должны быть обязательно методы: init - выполняемы для инициализации, onLoad - выполняемы при каждой загрузке страницы...

13) ВАЖНО!!! По умолчанию смотрится в папку в js по адресу где лежала вьюха или её кусок и подгружается фаил js если он есть.

14) НИКАКОГО JS во вьюхах. Для этого сделана удобная система автоподгрузки нужных скриптов. п.13

15)  data-updateHead="true" необходимо поставить в линке или кнопке отправить форму чтоб после отправки обновился header

16) для проверки залогинен ли пользователь использовать view()->data->user_is_login

17) Повозможности довайте избегать if -else и прочее в html коде во вьюхах. довайте все вычисления делать в контролере и хранить куски в блоках может... но цель одна - в контролере все подготовлено во вьюхах только просто <?=$var_name?>

18) все что нужно передать во view'хи записываем сюда view()->data->name_var

19) для ускарения рейтинг пользователя не считается каждый раз, а только если запрос не ajax. можно по ходу посчитать рейтинг пользователя - setUserRate() сделает это.
    если на самом деле не нужно пересчтивыть рейтинг то можно взять из кеша обратившись к рейтингу как к функции добавив в конце просто ()

20) сабменю для каждого контролера предпологается только одно и подгружается автоматом по названию класса

21) Для того чтоб небыло много пхп во вьюхах для каждого случая использовать часть которую хранить в библиотеке в папке view
    Так например заявка может быть арбитражной, гарант, стандарт и т.д.

22) в ссылках обязательно нужно указать в дата теге контролер и его метод (который совпадает с пунктом меню или может доп страница которой нет в меню но обязательно нужно указать так как по этому тегу определяется какой класс должен быть запущен чтоб выполнить инициализацию страницы)

24) если нужно чтоб по нажатию по сылке не работал _AW то нужно прописать тег data-reload='true'

25) для всех значительных опреций в js необходимо создовать отдельный класс наподобии _wm, _aw, loader и с ним работать. чтоб все было прозрачно и в одном месте.

26) если нужно в окошке изменить кнопки и сделать другие не такие как по дефаулту - то нужно просто переопределить название файла кнопок из папки windows/buttons в переменной view()->window_buttons

27) id каждого окна является его адрес controller_method_action (action не должно содержать символа '_') например на странице payments и кнопке bankNorvik будет соответствовать id - worckplace_payment_bankNorvik
    парамеры что нужно передать в окно передается через параметры дата тегов. если нужно вызвать функцию которая что-то посчитает для какого-то параметра то эта функция должна быть в js-классе окна
    который лежит в js/windows/content/controller/method/action.js. дата тег в этом случае должен быть таким data-name_callback="name_of_method_of_window_js-class" в этот метод будет переданы все дата параметры с кнопки что вызвала открытие окна.
    Если это что-то что нужно везде то просто из файла js-класса для окна вызвать функцию из helper.js или из отдельного js-классе если это что-то большое, как например расчет сроков для кредита и его прибыли

28) все места куда нужно что-то вставить в окне необходимо помечать дата тегом data-set="name_of_var"

29) чтоб сказать кнопке что она вызывает окно нужно написать её дата тег - data-type="window"
